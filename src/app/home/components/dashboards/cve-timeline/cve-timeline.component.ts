// cve-timeline.component.ts
import { Component, OnInit, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

export interface TimelineEvent {
  date: string;
  sentence: string;
  unixTime?: number;
}

export interface ParsedTimelineEvent extends TimelineEvent {
  unixTime: number;
  className: string;
}

@Component({
  selector: 'cve-timeline',
  templateUrl: './cve-timeline.component.html',
  styleUrl: './cve-timeline.component.less'
})
export class CveTimeLineComponent implements OnInit {
  @Input() title: string = "CVE-2022-28810 / CVE-2022-47966 Timeline";
  @Input() events: TimelineEvent[] = [];

  parsedEvents: ParsedTimelineEvent[] = [];

  private defaultEvents: TimelineEvent[] = [
    {
      date: "April 8, 2022",
      sentence: `The vulnerability was assigned the identifier CVE-2022-28810 by <mark>MITRE Corporation</mark>.<br/><br/>`
    },
    {
      date: "April 9, 2022",
      sentence: `<mark>ManageEngine</mark> released build 6122 of ADSelfService Plus to fix the vulnerability. The update removed the "custom script" feature that was being exploited.<br/><br/>`
    },
    {
      date: "April 14, 2022",
      sentence: `<mark>Rapid7</mark>, a cybersecurity company, published a blog post detailing the vulnerability.<br/><br/>`
    },
    {
      date: "April 18, 2022",
      sentence: `The vulnerability was published on the <mark>National Vulnerability Database (NVD)</mark>.<br/><br/>`
    },
    {
      date: "April 19, 2022",
      sentence: `A video was posted on <mark>YouTube</mark> demonstrating how to exploit the vulnerability using Metasploit, a penetration testing software.<br/><br/>`
    },
    {
      date: "April 21, 2022",
      sentence: `<mark>Packet Storm</mark>, a network security community, published a Metasploit module that exploits the "custom script" feature of ADSelfService Plus.<br/><br/>`
    },
    {
      date: "October 2022",
      sentence: `CVE-2022-47966 was discovered by <mark>Khoadha</mark> of Viettel Cyber Security and patched for the affected products.<br /><br />`
    },
    {
      date: "January 10, 2023",
      sentence: `<mark>ManageEngine</mark> released a security advisory for this issue.<br /><br />`
    },
    {
      date: "January 18, 2023",
      sentence: `The vulnerability was published on <mark>NVD</mark>.<br/>Researchers at <mark>Horizon3ai</mark> released a technical deep dive and a proof of concept (PoC) for this issue.<br /><br />`
    },
    {
      date: "January 19, 2023",
      sentence: `<mark>Horizon.ai</mark> released an in-depth technical overview of the CVE-2022-47966 alongside the PoC exploit for it. Simultaneously, <mark>Rapid7</mark> researchers reported several related compromises observed since at least January 17.<br /><br />`
    },
    {
      date: "January 2023",
      sentence: `Multiple nation-state advanced persistent threat <mark>(APT) actors</mark> exploited CVE-2022-47966 to access an organization's web server hosting the public-facing application, Zoho ManageEngine ServiceDesk Plus.<br/><br/>`
    },
    {
      date: "February 1, 2023",
      sentence: `<mark>Rapid7</mark> provided a detailed description of the vulnerability.<br/><br/>`
    },
    {
      date: "March 8, 2023",
      sentence: `<mark>CISA</mark> added CVE-2022-28810 to KEV.<br/><br/>`
    },
    {
      date: "March 15, 2023",
      sentence: `<mark>GreyNoise</mark> publishes tags for both CVEs.<br/><br/>`
    },
    {
      date: "September 7, 2023",
      sentence: `<mark>CISA</mark>, the Federal Bureau of Investigation (<mark>FBI</mark>), and the Cyber National Mission Force (<mark>CNMF</mark>) identified the presence of indicators of compromise (IOCs) at an Aeronautical Sector organization.<br/><br/>`
    }
  ];

  ngOnInit(): void {
    this.processEvents();
  }

  private processEvents(): void {
    const eventsToProcess = this.events.length > 0 ? this.events : this.defaultEvents;

    // Filter out empty dates and process events
    const filteredEvents = eventsToProcess
      .filter(event => event.date && event.date.trim() !== '')
      .map(event => ({
        ...event,
        unixTime: Math.floor(new Date(event.date).getTime() / 1000)
      }));

    let lastYear = "";

    this.parsedEvents = filteredEvents.map(event => {
      let className = "";

      const eventDate = new Date(event.date);
      if (isNaN(eventDate.getFullYear())) {
        className = "big";
      } else {
        const year = eventDate.getFullYear().toString();
        const century = year.substring(0, 2);

        if (lastYear !== century) {
          lastYear = century;
          className = "big";
        }
      }

      return {
        ...event,
        className
      };
    });
  }

  // Method to update events dynamically
  updateEvents(newEvents: TimelineEvent[]): void {
    this.events = newEvents;
    this.processEvents();
  }

  // Method to add a single event
  addEvent(event: TimelineEvent): void {
    this.events.push(event);
    this.processEvents();
  }

  // Method to clear all events
  clearEvents(): void {
    this.events = [];
    this.processEvents();
  }
}